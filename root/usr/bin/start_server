#!/bin/bash
if [ "$ENABLE_DEBUG" = "1" ]; then
  echo "Entering debug mode..."
  sleep 999999999999
  exit 0
fi

# Configuration variables for SteamCMD retry logic
STEAMCMD_MAX_RETRIES="${STEAMCMD_MAX_RETRIES:-10}"
STEAMCMD_RETRY_DELAY="${STEAMCMD_RETRY_DELAY:-5}"
STEAMCMD_AUTO_CLEANUP="${STEAMCMD_AUTO_CLEANUP:-true}"
STEAMCMD_LOG="/tmp/steamcmd_last_run.log"
SERVER_FILES_DIR="/home/gameserver/server-files"
STEAM_DIR="/home/gameserver/Steam"

# Function to check available disk space
check_disk_space() {
  local required_gb=15
  local available_kb=$(df -k "$SERVER_FILES_DIR" | awk 'NR==2 {print $4}')
  local available_gb=$((available_kb / 1024 / 1024))

  echo "[$(date '+%Y-%m-%d %H:%M:%S')] Checking disk space..."
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] Available: ${available_gb}GB, Required: ${required_gb}GB"

  if [ "$available_gb" -lt "$required_gb" ]; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Insufficient disk space!"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ARK: Survival Ascended requires at least ${required_gb}GB free space."
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Please free up disk space and try again."
    exit 202
  fi

  echo "[$(date '+%Y-%m-%d %H:%M:%S')] Disk space check passed."
}

# Function to detect SteamCMD errors
detect_steamcmd_error() {
  local log_file="$1"

  if grep -q "state is 0x602 after update job" "$log_file" 2>/dev/null; then
    echo "0x602"
  elif grep -q "state is 0x6 after update job" "$log_file" 2>/dev/null; then
    echo "0x6"
  elif grep -q "state is 0x606 after update job" "$log_file" 2>/dev/null; then
    echo "0x606"
  elif grep -q "state is 0x202 after update job" "$log_file" 2>/dev/null; then
    echo "0x202"
  elif grep -q "state is 0x402 after update job" "$log_file" 2>/dev/null; then
    echo "0x402"
  elif grep -q "state is 0x406 after update job" "$log_file" 2>/dev/null; then
    echo "0x406"
  elif grep -q "state is 0x106 after update job" "$log_file" 2>/dev/null; then
    echo "0x106"
  else
    echo "none"
  fi
}

# Function to cleanup corrupted appmanifest (fixes validation loop)
cleanup_appmanifest() {
  local appmanifest="$SERVER_FILES_DIR/steamapps/appmanifest_2430930.acf"
  local downloading_dir="$SERVER_FILES_DIR/steamapps/downloading"

  if [ "$STEAMCMD_AUTO_CLEANUP" = "true" ]; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Cleaning up corrupted appmanifest and incomplete downloads..."

    # Delete corrupted appmanifest file
    if [ -f "$appmanifest" ]; then
      rm -f "$appmanifest"
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] Removed corrupted appmanifest file"
    fi

    # Delete incomplete downloads
    if [ -d "$downloading_dir" ]; then
      rm -rf "$downloading_dir"
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] Removed incomplete downloads directory"
    fi

    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Cleanup complete. SteamCMD will restart download from scratch."
  else
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Auto-cleanup disabled. Set STEAMCMD_AUTO_CLEANUP=true to enable."
  fi
}

# Function to cleanup corrupted Steam files (for non-0x602 errors)
cleanup_steam_directory() {
  if [ "$STEAMCMD_AUTO_CLEANUP" = "true" ]; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Cleaning up potentially corrupted Steam directory..."
    if [ -d "$STEAM_DIR" ]; then
      # Note: This will fail on emptyDir volumes with "Device or resource busy"
      # but we keep it for compatibility with non-Kubernetes deployments
      rm -rf "$STEAM_DIR" 2>/dev/null || echo "[$(date '+%Y-%m-%d %H:%M:%S')] Warning: Could not remove Steam directory (may be mounted)"
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] Steam directory cleanup attempted."
    fi
  else
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Auto-cleanup disabled. Set STEAMCMD_AUTO_CLEANUP=true to enable."
  fi
}

# Function to run SteamCMD with retry logic
run_steamcmd_with_retry() {
  local attempt=1
  local max_retries="$STEAMCMD_MAX_RETRIES"
  local base_delay="$STEAMCMD_RETRY_DELAY"
  local cleanup_threshold=$((max_retries / 2))

  echo "[$(date '+%Y-%m-%d %H:%M:%S')] Starting SteamCMD download/update (max retries: $max_retries)..."

  while [ "$attempt" -le "$max_retries" ]; do
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Attempt $attempt of $max_retries..."

    # Run SteamCMD and capture output
    cd /home/gameserver/steamcmd
    ./steamcmd.sh +force_install_dir "$SERVER_FILES_DIR" +login anonymous +app_update 2430930 validate +quit 2>&1 | tee "$STEAMCMD_LOG"
    local exit_code="${PIPESTATUS[0]}"

    # Check if successful
    if [ "$exit_code" -eq 0 ]; then
      # Also verify no error states in output
      local error_code=$(detect_steamcmd_error "$STEAMCMD_LOG")
      if [ "$error_code" = "none" ]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] SteamCMD completed successfully!"
        return 0
      else
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] SteamCMD reported error state: $error_code"
      fi
    else
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] SteamCMD exited with code: $exit_code"
    fi

    # Detect specific error
    local error_code=$(detect_steamcmd_error "$STEAMCMD_LOG")
    if [ "$error_code" != "none" ]; then
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] Detected error: $error_code"

      case "$error_code" in
        "0x602")
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Error 0x602: Corrupted appmanifest or incomplete download"
          # For 0x602 errors, cleanup appmanifest immediately on 2nd attempt
          if [ "$attempt" -ge 2 ]; then
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Attempting targeted cleanup for validation loop..."
            cleanup_appmanifest
          fi
          ;;
        "0x6")
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Error 0x6: No connection to content servers or corrupted files"
          ;;
        "0x606")
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Error 0x606: Disk write failure or permission issues"
          ;;
        "0x202")
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Error 0x202: Insufficient disk space"
          ;;
      esac
    fi

    # If we've hit the cleanup threshold for other errors, try removing corrupted Steam directory
    if [ "$attempt" -eq "$cleanup_threshold" ] && [ "$error_code" != "0x602" ]; then
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] Reached cleanup threshold. Attempting to clean corrupted files..."
      cleanup_steam_directory
    fi

    # Check if we've exhausted retries
    if [ "$attempt" -eq "$max_retries" ]; then
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: SteamCMD failed after $max_retries attempts!"
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] Last error: $error_code"
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] Check $STEAMCMD_LOG for details."
      return 1
    fi

    # Calculate delay with exponential backoff
    local delay=$((base_delay * attempt))
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Waiting ${delay}s before retry..."
    sleep "$delay"

    attempt=$((attempt + 1))
  done

  return 1
}

# download steamcmd if necessary
if [ ! -d "/home/gameserver/steamcmd/linux32" ]; then
  cd /home/gameserver/steamcmd
	wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz
  tar xfvz steamcmd_linux.tar.gz
fi

# Check disk space before attempting download
check_disk_space

# download/update server files with retry logic
if ! run_steamcmd_with_retry; then
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] FATAL: Unable to download/update server files."
  exit 203
fi

PROTON_VERSION="10-17"
PROTON_DIR_NAME="GE-Proton$PROTON_VERSION"
PROTON_ARCHIVE_NAME="$PROTON_DIR_NAME.tar.gz"
STEAM_COMPAT_DATA=/home/gameserver/server-files/steamapps/compatdata
STEAM_COMPAT_DIR=/home/gameserver/Steam/compatibilitytools.d
ASA_COMPAT_DATA=$STEAM_COMPAT_DATA/2430930
ASA_BINARY_DIR="/home/gameserver/server-files/ShooterGame/Binaries/Win64"
START_PARAMS_FILE="/home/gameserver/server-files/start-parameters"
MODS="$(/usr/local/bin/cli-asa-mods)"

# Interpolate environment variables in ASA_START_PARAMS
# This allows using ${ENV_VAR} syntax in start parameters for secrets
ASA_START_PARAMS=$(eval echo "\"$ASA_START_PARAMS\"")

ASA_START_PARAMS="$ASA_START_PARAMS $MODS"
ASA_BINARY_NAME="ArkAscendedServer.exe"
ASA_PLUGIN_BINARY_NAME="AsaApiLoader.exe"
ASA_PLUGIN_LOADER_ARCHIVE_NAME=$(basename $ASA_BINARY_DIR/AsaApi_*.zip)
ASA_PLUGIN_LOADER_ARCHIVE_PATH="$ASA_BINARY_DIR/$ASA_PLUGIN_LOADER_ARCHIVE_NAME"
ASA_PLUGIN_BINARY_PATH="$ASA_BINARY_DIR/$ASA_PLUGIN_BINARY_NAME"
LAUNCH_BINARY_NAME="$ASA_BINARY_NAME"

# install proton if necessary
if [ ! -d "$STEAM_COMPAT_DIR/$PROTON_DIR_NAME" ]; then
  mkdir -p $STEAM_COMPAT_DIR
  echo "Downloading Proton version $PROTON_VERSION... This might take a while"
  wget -P /tmp https://github.com/GloriousEggroll/proton-ge-custom/releases/download/GE-Proton$PROTON_VERSION/GE-Proton$PROTON_VERSION.tar.gz
  EXIT_CODE=$?

  if [ $EXIT_CODE -ne 0 ]; then
    echo "Error: Error while downloading Proton ($EXIT_CODE)"
    exit 200
  fi

  echo "Download finished, comparing checksums..."
  sha512sum -c /usr/share/proton/GE-Proton$PROTON_VERSION.sha512sum

  if [ $? -ne 0 ]; then
    echo "Error: Proton checksum mismatch!"
    exit 201
  fi

  tar -xf /tmp/$PROTON_ARCHIVE_NAME -C $STEAM_COMPAT_DIR
  rm /tmp/$PROTON_ARCHIVE_NAME
fi

# install proton compat game data
if [ ! -d "$ASA_COMPAT_DATA" ]; then
  mkdir -p $STEAM_COMPAT_DATA
  cp -r $STEAM_COMPAT_DIR/$PROTON_DIR_NAME/files/share/default_pfx $ASA_COMPAT_DATA
fi

echo "Starting the ARK: Survival Ascended dedicated server..."
echo "Start parameters: $ASA_START_PARAMS"

export XDG_RUNTIME_DIR=/run/user/$(id -u)
export STEAM_COMPAT_CLIENT_INSTALL_PATH=/home/gameserver/Steam
export STEAM_COMPAT_DATA_PATH=$ASA_COMPAT_DATA

cd "$ASA_BINARY_DIR"

# unzip the asa plugin api archive if it exists. delete it afterwards
if [ -f "$ASA_PLUGIN_LOADER_ARCHIVE_PATH" ]; then
  unzip -o $ASA_PLUGIN_LOADER_ARCHIVE_NAME
  rm $ASA_PLUGIN_LOADER_ARCHIVE_NAME
fi

if [ -f "$ASA_PLUGIN_BINARY_PATH" ]; then
  echo "Detected ASA Server API loader. Launching server through $ASA_PLUGIN_BINARY_NAME"
  LAUNCH_BINARY_NAME="$ASA_PLUGIN_BINARY_NAME"
fi

$STEAM_COMPAT_DIR/$PROTON_DIR_NAME/proton run $LAUNCH_BINARY_NAME $ASA_START_PARAMS

name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: jdogwilly/asa-linux-server

jobs:
  # Job 1: Fast-fail security validation
  validate:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: Run Gitleaks secret scan
        uses: gitleaks/gitleaks-action@1f2d10fb689bc07a5f56f48d6db61f94e8f6682d # v2.3.7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}  # Optional: for Gitleaks Pro features

  # Job 2: Build image for Pull Requests (no push)
  build:
    if: github.event_name == 'pull_request'
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Read VERSION file
        id: version
        run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          platforms: linux/amd64
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

      - name: Save image to tarball
        run: |
          docker save ${{ steps.meta.outputs.tags }} -o pr-image.tar
          gzip pr-image.tar

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: pr-image
          path: pr-image.tar.gz
          retention-days: 1

  # Job 3: Image size comparison and PR comment
  size-report:
    if: github.event_name == 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Download PR image artifact
        uses: actions/download-artifact@v4
        with:
          name: pr-image

      - name: Load PR image
        run: |
          gunzip pr-image.tar.gz
          docker load -i pr-image.tar

      - name: Get PR image size
        id: pr-size
        run: |
          # Get image ID from loaded image
          IMAGE_ID=$(docker images --format "{{.ID}}" | head -n 1)
          # Get size in bytes
          SIZE_BYTES=$(docker inspect $IMAGE_ID --format='{{.Size}}')
          # Convert to MB
          SIZE_MB=$(echo "scale=2; $SIZE_BYTES / 1048576" | bc)
          echo "size_mb=$SIZE_MB" >> $GITHUB_OUTPUT
          echo "size_bytes=$SIZE_BYTES" >> $GITHUB_OUTPUT

      - name: Pull and inspect main branch image
        id: main-size
        run: |
          # Pull latest image from main branch
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || echo "main-not-found=true" >> $GITHUB_OUTPUT

          # Check if pull succeeded
          if docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest > /dev/null 2>&1; then
            SIZE_BYTES=$(docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --format='{{.Size}}')
            SIZE_MB=$(echo "scale=2; $SIZE_BYTES / 1048576" | bc)
            echo "size_mb=$SIZE_MB" >> $GITHUB_OUTPUT
            echo "size_bytes=$SIZE_BYTES" >> $GITHUB_OUTPUT
          else
            echo "size_mb=0" >> $GITHUB_OUTPUT
            echo "size_bytes=0" >> $GITHUB_OUTPUT
          fi

      - name: Calculate size difference
        id: diff
        run: |
          PR_SIZE=${{ steps.pr-size.outputs.size_bytes }}
          MAIN_SIZE=${{ steps.main-size.outputs.size_bytes }}

          if [ "$MAIN_SIZE" = "0" ]; then
            echo "No main branch image found for comparison"
            echo "diff_mb=N/A" >> $GITHUB_OUTPUT
            echo "diff_pct=N/A" >> $GITHUB_OUTPUT
            echo "alert=false" >> $GITHUB_OUTPUT
          else
            # Calculate absolute difference in MB
            DIFF_BYTES=$((PR_SIZE - MAIN_SIZE))
            DIFF_MB=$(echo "scale=2; $DIFF_BYTES / 1048576" | bc)

            # Calculate percentage change
            DIFF_PCT=$(echo "scale=2; ($DIFF_BYTES * 100) / $MAIN_SIZE" | bc)

            echo "diff_mb=$DIFF_MB" >> $GITHUB_OUTPUT
            echo "diff_pct=$DIFF_PCT" >> $GITHUB_OUTPUT

            # Check if increase exceeds thresholds (>5% OR >50MB)
            ABS_DIFF_MB=${DIFF_MB#-}  # Remove negative sign for comparison
            ABS_DIFF_PCT=${DIFF_PCT#-}

            if (( $(echo "$ABS_DIFF_PCT > 5" | bc -l) )) || (( $(echo "$ABS_DIFF_MB > 50" | bc -l) )); then
              echo "alert=true" >> $GITHUB_OUTPUT
            else
              echo "alert=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Post size comparison comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: docker-image-size
          message: |
            ## 📊 Docker Image Size Report

            | Branch | Size | Difference |
            |--------|------|------------|
            | Main   | ${{ steps.main-size.outputs.size_mb }} MB | - |
            | PR     | ${{ steps.pr-size.outputs.size_mb }} MB | ${{ steps.diff.outputs.diff_mb }} MB (${{ steps.diff.outputs.diff_pct }}%) |

            ${{ steps.diff.outputs.alert == 'true' && '⚠️ **Warning**: Image size increased significantly (>5% or >50MB)' || '✅ Image size change is within acceptable range' }}

  # Job 4: Build and push for main/tags
  build-and-push:
    if: github.event_name != 'pull_request'
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Read VERSION file
        id: version
        run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

  # Job 5: Security scanning for main/tags
  security-scan:
    if: github.event_name != 'pull_request'
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@16140ae1a102900babc80a33c44059580f687047 # v4
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (table output)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }}
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
